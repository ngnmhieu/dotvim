"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
" VUNDLE
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

set nocompatible " less compatible wiht Vi, Vim behaves better
filetype off     " required for Vundle, will be reactivated later

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
" Plugin 'VundleVim/Vundle.vim'

Plugin 'mileszs/ack.vim'
Plugin 'jiangmiao/auto-pairs'
Plugin 'mattn/emmet-vim'
Plugin 'othree/html5.vim'
Plugin 'ngnmhieu/nerdtree'
Plugin 'godlygeek/tabular'
Plugin 'joonty/vdebug'
Plugin 'bling/vim-airline'
Plugin 'Chiel92/vim-autoformat'
Plugin 'tpope/vim-bundler'
Plugin 'tpope/vim-fugitive'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'tpope/vim-rails'
Plugin 'gabrielelana/vim-markdown'
Plugin 'suan/vim-instant-markdown'
Plugin 'chase/vim-ansible-yaml'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'tmhedberg/matchit'
" Plugin 'pangloss/vim-javascript'
" Plugin 'leafgarland/typescript-vim'

" Code-Completion Engine for Vim
" Plugin 'Valloric/YouCompleteMe'

" Syntax checker
" Plugin 'scrooloose/syntastic'

Plugin 'garbas/vim-snipmate'
Plugin 'honza/vim-snippets'

" vim-snipmate's dependency 
Plugin 'tomtom/tlib_vim'             
Plugin 'MarcWeber/vim-addon-mw-utils'
" end vim-snipmate's dependency 

Plugin 'tpope/vim-surround'

" Shortcut for toggling comments
Plugin 'tomtom/tcomment_vim'

" All of your Plugins must be added before the following line
call vundle#end()

filetype plugin indent on 
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
" END VUNDLE
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

if $COLORTERM == 'gnome-terminal'
  set t_Co=256
endif

set autochdir

" appearance
colorscheme jellybeans

set nu " line numbers
set expandtab " turn tabs into spaces
syntax on

set autoindent
set smartindent
set cindent
set cinkeys=0{,0},0#,!^F

set tabstop=4
set shiftwidth=4
set softtabstop=4
set cursorline " underline current line
set incsearch " highlight as you search
set backspace=indent,eol,start " fix backspace key for vim 7.4

" Ignore uninterresting files and directory
set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe  " Windows

" change window spliting behavior
set splitbelow
set splitright

" show command when they are typed
set showcmd

" copy between vim processes
set clipboard=unnamed
" in MacOSX Terminal app, you must use MouseTerm plugin in SIMBL
set mouse=a

" change leader key to ,
let mapleader=','

" turn off preview window in omni auto complete
set completeopt-=preview

" pathogen - plugin manager
execute pathogen#infect()
Helptags

" Paste mode toggle, aid in pasting text with Ctrl-Shift-v
set pastetoggle=<F2>

" Toggle cursorline when switching between normal and insert mode
:autocmd InsertEnter,InsertLeave * set cul!

"################
"### MAPPINGS ###
"################

" moving between lines
nnoremap j gj
nnoremap k gk

" remap switching split windows
nnoremap <silent> <C-l> <c-w>l
nnoremap <silent> <C-h> <c-w>h
nnoremap <silent> <C-k> <c-w>k
nnoremap <silent> <C-j> <c-w>j

" remap go to first character of line
nnoremap ! ^
nnoremap ^ !
vnoremap ! ^
vnoremap ^ !
onoremap ! ^
onoremap ^ !
" ## end ##

" indenting
nnoremap > >>
nnoremap < <<
vnoremap < <gv
vnoremap > >gv

" Pasting text without overriding yanked text
xnoremap p "_dP

" Next/Prev tab
nnoremap <S-TAB> :tabp<CR>
nnoremap <S-q> :tabn<CR>
map <C-n> :tabnew<CR>

" scrolling up down
nnoremap { <C-E>
nnoremap } <C-Y>

" convinient key to toggle hlsearch
nnoremap <silent> <space> :set hlsearch!<CR>

" search selected text
vnoremap <space> "zyq/"zp<CR><C-o>:set hlsearch<CR>

" search and replace selected text
vnoremap <C-r> "hy:%s/<C-r>h//gc<left><left><left>

" close current tab
nnoremap <expr> <leader>w tabpagenr('$') > 1 ? ':tabclose<CR>' : ':q<CR>' 
" close current buffer
nnoremap <expr> <leader>c v:count > 0 ? ':<C-U>exe "tabclose " . v:count<CR>' : ':q<CR>' 
" open tab | 1,. 2,. 3,.
nnoremap <leader>. :<C-U>exe "tabnext " . v:count1<CR>

" Command-T
let g:CommandTCancelMap=['<C-[>', '<ESC>']

" VCSCommand
let g:VCSCommandMapPrefix='<Leader>v'

" Keyword AutoComplete (:help ins-completion)
" Accept the current autocomplete and exit INSERT mode
inoremap <C-z> <C-y><ESC>

" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! w !sudo tee > /dev/null %

"##############
" vim-instant-markdown
"##############
" let g:vim_markdown_folding_disabled=1 " disable folding in markdown files
let g:instant_markdown_autostart=0 " to trigger use :InstantMarkdownPreview
" au BufRead,BufNewFile *.md set filetype=markdown


" remove delay in exiting visual mode
set timeoutlen=1000 ttimeoutlen=0

"@@@@@@@@@@@@@@@@@@@@
" Tcomment 
"@@@@@@@@@@@@@@@@@@@@
map <C-c> :TComment<CR>
vmap <C-b> :TCommentBlock<CR>

"###########
" Emmet
"###########
let g:user_emmet_expandabbr_key = '<c-b>'

"@@@@@@@@@@@@@@@@@@@
" NerdTree
"@@@@@@@@@@@@@@@@@@@
map <C-]> :NERDTreeToggle<CR>
map <C-f> :NERDTreeFind<CR>
let g:nerdtree_tabs_autoclose = 1  
let NERDTreeIgnore = ['^CVS$']

"#############
" Tabular
"#############
vmap <leader>t= :Tabularize /=<CR>
nmap <leader>t= :Tabularize /=<CR>
vmap <leader>t: :Tabularize /:<CR>
nmap <leader>t: :Tabularize /:<CR>
vmap <leader>tt :Tabularize /
nmap <leader>tt :Tabularize /

"@@@@@@@@@@@@@@@@   
" VIM Airline
"@@@@@@@@@@@@@@@@   
" Show tab number
" let g:airline#extensions#tabline#enabled = 1 " enable vim-airline tabline
let g:airline#extensions#tabline#tab_nr_type = 1
let g:airline#extensions#tabline#show_tab_nr = 1
let g:airline#extensions#tabline#fnamemod = ':t:.'
" vim-airline appear all the time
set laststatus=2

"@@@@@@@@@@@@@@@@@@@@@@@@@@@@
" Vim default tabline format
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@
function! Tabline()
  let s = ''
  for i in range(tabpagenr('$'))
    let tab = i + 1
    let winnr = tabpagewinnr(tab)
    let buflist = tabpagebuflist(tab)
    let bufnr = buflist[winnr - 1]
    let bufname = bufname(bufnr)
    let bufmodified = getbufvar(bufnr, "&mod")

    let s .= '%' . tab . 'T'
    let s .= (tab == tabpagenr() ? '%#TabLineSel#' : '%#TabLine#')
    let s .= ' ' . tab .':'
    let s .= (bufname != '' ? '['. fnamemodify(bufname, ':t') . '] ' : '[No Name] ')

    if bufmodified
      let s .= '[+] '
    endif
  endfor

  let s .= '%#TabLineFill#'
  return s
endfunction
set tabline=%!Tabline()

"@@@@@@@@@@@@@@@@
" Searching with Ack
"@@@@@@@@@@@@@@@@
" search the for files containing selected text with Ack (ignore hidden files)
" -o is to output only the matched pattern
" -Q match literal string
let g:ack_default_options = " -s -H --nocolor --nogroup --ignore-file=match:'^\\.' -o -Q"
vnoremap <C-k> "ky:Ack '<C-R>k' <CR>/<C-R>k<CR>
vnoremap <C-l> "ky:Ack '<C-R>k'

"@@@@@@@@@@@@@@@@
" Quickfix
"@@@@@@@@@@@@@@@@
"Jump to next file in Quickfix
nnoremap <leader>n :cnf<CR>
"Jump to previous file in Quickfix
nnoremap <leader>p :cpf<CR>

"@@@@@@@@@@@@@@@@@
" Folding
"@@@@@@@@@@@@@@@@@
nnoremap <tab> za
" collapse / expand all folds
nnoremap _ zM 
nnoremap + zR

" all folds are open when a file is opened
set foldlevelstart=99

"@@@@@@@@@@@@@@@@@
" PHP
"@@@@@@@@@@@@@@@@@
let php_folding = 1
let php_htmlInStrings = 1

"@@@@@@@@@@@@@@@@@@@@@@@@
" map Ctrl-S to save file
"@@@@@@@@@@@@@@@@@@@@@@@@
command -nargs=0 -bar Update if &modified 
                           \|    if empty(bufname('%'))
                           \|        browse confirm write
                           \|    else
                           \|        confirm write
                           \|    endif
                           \|endif
nnoremap <silent> <C-S> :<C-u>Update<CR>
inoremap <c-s> <Esc>:Update<CR>

"@@@@@@@@@@@@@@@@@@@@@@@@
" vim-autoclose
"@@@@@@@@@@@@@@@@@@@@@@@@
" not doubling the whitespace
let g:AutoCloseExpandSpace = 0


"@@@@@@@@@@@@@@@@@@@@@@@@
" vim-autoformat
"@@@@@@@@@@@@@@@@@@@@@@@@
let g:formatterpath = [$HOME."/.vim/etc/formatters/", $HOME."/.vim/etc/node_modules/.bin"]
noremap <c-m> :Autoformat<CR>
" prevent fallback to vim's indent file
let g:autoformat_autoindent = 0
let g:autoformat_retab = 0
let g:autoformat_remove_trailing_spaces = 0

"@@@@@@@@@@@@@@@@@@@@@@@
" SnipMate
"@@@@@@@@@@@@@@@@@@@@@@@
" different keymap to trigger snipMate as YCM used tab
imap <C-L> <Plug>snipMateNextOrTrigger
smap <C-L> <Plug>snipMateNextOrTrigger


"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
" YouCompleteMe Code-Completion
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
" let g:ycm_auto_trigger = 1
" let g:ycm_python_binary_path = '/usr/local/bin/python3'
" let g:ycm_filetype_blacklist = {'ansible': 1, 'yaml': 1, 'json': 1, 'markdown': 1}

"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
" Syntastic Syntax Checking
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0
" let g:syntastic_html_checkers = []
" let g:syntastic_scss_checkers = []

"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
" vim-markdown
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
let g:markdown_enable_spell_checking = 0
let g:markdown_mapping_switch_status = '<leader>s'
" text formatting to BOLD in vim italic mode
set t_ZH=[1m
set t_ZR=

"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
" RAML
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
autocmd BufNewFile,BufRead *.raml set filetype=ansible

"@@@@@@@@@@@@@@@@@@@@@@@@@@@@
" JSON-LD
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@
autocmd BufNewFile,BufRead *.jsonld set filetype=json

"@@@@@@@@@@@@@@@@@@@@@@@@@@@@
" EJS
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@
autocmd BufNewFile,BufRead *.ejs set filetype=html

"@@@@@@@@@@@@@@@@@@@@@@@@@@@@
" JSON
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@
autocmd BufNewFile,BufRead *.json set tabstop=2
autocmd BufNewFile,BufRead *.json set shiftwidth=2
autocmd BufNewFile,BufRead *.json set softtabstop=2

"@@@@@@@@@@@@@@@@@@@@@@@@@@@@
" CTRL-P
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git\|bower_components'
let g:ctrlp_working_path_mode = 'ra'
